{"version":3,"sources":["reportWebVitals.js","make-data.js","data-table.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","namor","generate","words","numbers","lastName","age","floor","visits","progress","status","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","value","onChange","e","target","undefined","placeholder","fuzzyTextFilterFn","rows","id","matchSorter","keys","row","values","NumberRangeColumnFilter","React","useMemo","min","max","forEach","style","display","type","val","old","parseInt","width","marginRight","marginLeft","SelectColumnFilter","options","Set","add","map","option","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","initialState","pageIndex","pageSize","useFilters","useGlobalFilter","usePagination","getTableProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","className","onClick","disabled","defaultValue","Number","striped","bordered","hover","size","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","getRowProps","cells","cell","getCellProps","CreateTable","Header","accessor","useState","lens","makeDataLevel","depth","d","subRows","makeData","setData","skipPageReset","setSkipPageReset","updateMyData","rowIndex","columnId","index","autoRemove","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5212ffad.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import namor from 'namor'\r\n\r\nconst range = len => {\r\n  const arr = []\r\n  for (let i = 0; i < len; i++) {\r\n    arr.push(i)\r\n  }\r\n  return arr\r\n}\r\n\r\nconst newPerson = () => {\r\n  const statusChance = Math.random()\r\n  return {\r\n    firstName: namor.generate({ words: 1, numbers: 0 }),\r\n    lastName: namor.generate({ words: 1, numbers: 0 }),\r\n    age: Math.floor(Math.random() * 30),\r\n    visits: Math.floor(Math.random() * 100),\r\n    progress: Math.floor(Math.random() * 100),\r\n    status:\r\n      statusChance > 0.66\r\n        ? 'relationship'\r\n        : statusChance > 0.33\r\n        ? 'complicated'\r\n        : 'single',\r\n  }\r\n}\r\n\r\nexport default function makeData(...lens) {\r\n  const makeDataLevel = (depth = 0) => {\r\n    const len = lens[depth]\r\n    return range(len).map(d => {\r\n      return {\r\n        ...newPerson(),\r\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\r\n      }\r\n    })\r\n  }\r\n\r\n  return makeDataLevel()\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useTable, useFilters, useGlobalFilter, usePagination } from 'react-table';\r\nimport { matchSorter } from 'match-sorter';\r\nimport makeData from './make-data.js'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport BTable from 'react-bootstrap/Table';\r\n\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n    />\r\n  )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n//Dropdown Selection Filter\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set()\r\n    preFilteredRows.forEach(row => {\r\n      if (row.values[id] !== \"\" && row.values[id] !== undefined) {\r\n        options.add(row.values[id])\r\n      }\r\n    })\r\n    return [...options.values()]\r\n  }, [id, preFilteredRows])\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined)\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\n\r\nfunction Table({ columns, data }) {\r\n\r\n  //Set the default filter as Input filter (fuzzyTextFilter)\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter(row => {\r\n          const rowValue = row.values[id]\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n              .toLowerCase()\r\n              .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  )\r\n\r\n  // Use the state and functions returned from useTable\r\n  const {\r\n    getTableProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable({\r\n    columns,\r\n    data,\r\n    defaultColumn,\r\n    filterTypes,\r\n    initialState: { pageIndex: 0, pageSize: 20 },\r\n  },\r\n    useFilters,\r\n    useGlobalFilter,\r\n    usePagination\r\n  )\r\n\r\n  // Render the table UI\r\n  return (\r\n    <>\r\n    {/* Pagination */}\r\n      <div className=\"pagination block\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n      </div>\r\n\r\n      {/* Per-page selection */}\r\n      <select className=\"per-page-selection\"\r\n        value={pageSize}\r\n        onChange={e => {\r\n          setPageSize(Number(e.target.value))\r\n        }}\r\n      >\r\n        {[10, 20, 30, 40, 50, 100].map(pageSize => (\r\n          <option key={pageSize} value={pageSize}>\r\n            Show {pageSize}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {/* Data table */}\r\n      <BTable striped bordered hover size=\"sm\" {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()} className=\"table-primary\">\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>\r\n                  {column.render('Header')}\r\n                  {/* Render the columns filter UI */}\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody>\r\n          {page.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>\r\n                      {cell.render('Cell')}\r\n                    </td>\r\n                  )\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </BTable>\r\n\r\n      {/* Pagination */}\r\n      <div className=\"pagination block\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n      </div>\r\n      \r\n      {/* Per-page selection */}\r\n      <select className=\"per-page-selection\"\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50, 100].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default function CreateTable() { \r\n\r\n\r\n  // Output header and data prop for react-table\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        columns: [\r\n          {\r\n            Header: 'First Name',\r\n            accessor: 'firstName',\r\n          },\r\n          {\r\n            Header: 'Last Name',\r\n            accessor: 'lastName',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        Header: 'Info',\r\n        columns: [\r\n          {\r\n            Header: 'Age',\r\n            accessor: 'age',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n          },\r\n          {\r\n            Header: 'Visits',\r\n            accessor: 'visits',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n          },\r\n          {\r\n            Header: 'Status',\r\n            accessor: 'status',\r\n            Filter: SelectColumnFilter,\r\n            filter: 'includes',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  )\r\n  \r\n  const [data, setData] = React.useState(React.useMemo(() => makeData(100), []))\r\n  const [skipPageReset, setSkipPageReset] = React.useState(false)\r\n\r\n  const updateMyData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true)\r\n    setData(old =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value,\r\n          }\r\n        }\r\n        return row\r\n      })\r\n    )\r\n  }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Table columns={columns} data={data} setData={setData} updateMyData={updateMyData} skipPageReset={skipPageReset} />\r\n      </div>\r\n    );\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport CreateTable from './data-table.js';\n\nclass Header extends React.Component{\n  render() {\n    return (\n      <div>\n        <h1>React Straker Coding Exercise</h1>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n<CreateTable />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}